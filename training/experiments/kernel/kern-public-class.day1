1. strace/ltrace
写一个最简单的有printf类似的程序，用strace/lstrace跟踪

2. 学会使用pcduino3
串口连接（kermit）；    c, ctrl \ c, exit
网口连接(板子和PC直连)；  scp,ssh
观察根文件系统； 

3. 学会使用gdbserver
把电脑上的~/develop/training/debug/gdb下面编译好的gdb-exam拷贝到pcduino3的/usr/bin
用gdbserver(pcduino3)和arm-linux-gnueabihf-gdb（电脑）进行调试

4. 在板子内核源代码(~/develop/pcduino/kernel)下面的drivers/char添加一个hello.c, 并修改Kconfig和Makefile
hello.c如下：
#include <linux/init.h>
#include <linux/module.h>

static int __init hello_init(void)
{
	printk(KERN_INFO "Hello World enter\n");
	return 0;
}
module_init(hello_init);

static void __exit hello_exit(void)
{
	printk(KERN_INFO "Hello World exit\n ");
}
module_exit(hello_exit);

Kconfig和Makefile修改如下：
diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index a043107..d0e4d83 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -4,6 +4,16 @@
 
 menu "Character devices"
 
+config HELLO
+	tristate "hello world"
+	default n
+	help
+	  Say Y here if you want to support the /dev/mem device.
+	  The /dev/mem device is used to access areas of physical
+	  memory.
+	  When in doubt, say "Y".
+
+
 source "drivers/tty/Kconfig"
 
 config DEVMEM
diff --git a/drivers/char/Makefile b/drivers/char/Makefile
index d8a7579..d5c084f 100644
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -2,6 +2,7 @@
 # Makefile for the kernel character device drivers.
 #
 
+obj-$(CONFIG_HELLO)	+= hello.o
 obj-y				+= mem.o random.o
 obj-$(CONFIG_TTY_PRINTK)	+= ttyprintk.o
 obj-y				+= misc.o

通过make ARCH=arm menuconfig配置内核。
编译内核(尝试把hello编译为.ko和直接built-in 2种情况)，重新烧卡。
并放到板子上去跑。

5. 跑fork/vfork的例子(路径~/develop/training/process/fork)


--------------------------------------------------------------------------------------------
实验笔记：

板子代码：
~/develop/pcduino
内核代码：~/develop/pcduino/kernel

kernel$ vim init/main.c

mount:
/dev/sdb1 on /media/baohua/1AB7-5939 type vfat 
/dev/sdb2 on /media/baohua/99787b2d-d9d2-426b-b46b-ed7594a16856 type ext4

$ cd /media/baohua/1AB7-5939/
baohua@baohua-VirtualBox:/media/baohua/1AB7-5939$ ls
extlinux  sun7i-a20-pcduino3-nano.dtb  System Volume Information  zImage

弹出SD卡前执行：
sudo eject /dev/sdb

ltrace:
baohua@baohua-VirtualBox:~$ gcc xxx.c
baohua@baohua-VirtualBox:~$ ltrace ./a.out 

 ltrace -T ./a.out 


gdb: 
~/develop/training/debug/gdb

本机模式：
$ gdb ./a.out

(gdb) b main
(gdb) r
ctrl+x按下，抬起，a（开/关源码）
n -> next
s -> step

ctrl+x按下，抬起,2 (开汇编)
ni si

ctrl+x按下，抬起,1(关汇编)

断点：
 b 43
继续：
c

s
看backtrace:
bt (where)

(gdb)  p bk
$1 = {name = 0x0, year = 0, price = 0}
(gdb) p bk.year=2017
$2 = 2017
(gdb) 

(gdb) p &bk
$3 = (struct book *) 0x804a028 <bk>

看内存：
x/16w 0x804a028
set *(int *)0x804a02c=2018

watch bk.year

退出gdb:
quit


kermit:
确保 ls -l /dev/ttyUSB0存在
sudo kermit
C-Kermit>c
板子配置ip：
root@pcduino3:~# ifconfig eth0 192.168.100.100 up

ctrl+\ c进入kermit根据命令模式
exit


通过网线连板子：
ssh root@192.168.100.100

编译arm程序：
~/develop/training/debug/gdb$ arm-linux-gnueabi-gcc main.c -g -static
拷贝：
scp a.out root@192.168.100.100:/

板子执行：
root@pcduino3:/# gdbserver :1234 ./a.out 
Process ./a.out created; pid = 332
Listening on port 1234
电脑调试：
baohua@baohua-VirtualBox:~/develop/training/debug/gdb$ arm-linux-gnueabihf-gdb ./a.out 
(gdb) target remote 192.168.100.100:1234
Remote debugging using 192.168.100.100:1234
0x00008b98 in _start ()
(gdb) b main
Breakpoint 1 at 0x8dd8
(gdb) c
Continuing.

Breakpoint 1, 0x00008dd8 in main ()

内核配置和编译：

~/develop/pcduino/kernel$ ./build.sh 

make ARCH=arm menuconfig

baohua@baohua-VirtualBox:~/develop/pcduino/images$ cp zImage /media/baohua/1AB7-5939/
baohua@baohua-VirtualBox:~/develop/pcduino/images/rootfs$ sudo cp -fa * /media/baohua/99787b2d-d9d2-426b-b46b-ed7594a16856/

作为ko:

root@pcduino3:~# modprobe hello
[   39.510000] --------------------Hello World enter---------------------

root@pcduino3:~# rmmod hello
[   62.050000] Hello World exit

root@pcduino3:/lib/modules/4.4.0/kernel/drivers/misc# insmod hello.ko 
[   99.710000] --------------------Hello World enter---------------------
 
