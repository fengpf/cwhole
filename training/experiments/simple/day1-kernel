1. 理解Linux kernel/module的编译过程
~/develop/linux/build.sh
~develop/linux/module.sh

2. 在板子内核源代码(~/develop/linux)下面的drivers/misc添加一个hello.c, 并修改Kconfig和Makefile
hello.c如下：
#include <linux/init.h>
#include <linux/module.h>

static int __init hello_init(void)
{
	printk(KERN_INFO "Hello World enter\n");
	return 0;
}
module_init(hello_init);

static void __exit hello_exit(void)
{
	printk(KERN_INFO "Hello World exit\n ");
}
module_exit(hello_exit);

Kconfig和Makefile修改如下：
diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index a043107..d0e4d83 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -4,6 +4,16 @@
 
 menu "Character devices"
 
+config HELLO
+	tristate "hello world"
+	default n
+	help
+	  Say Y here if you want to support the /dev/mem device.
+	  The /dev/mem device is used to access areas of physical
+	  memory.
+	  When in doubt, say "Y".
+
+
 source "drivers/tty/Kconfig"
 
 config DEVMEM
diff --git a/drivers/char/Makefile b/drivers/char/Makefile
index d8a7579..d5c084f 100644
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -2,6 +2,7 @@
 # Makefile for the kernel character device drivers.
 #
 
+obj-$(CONFIG_HELLO)	+= hello.o
 obj-y				+= mem.o random.o
 obj-$(CONFIG_TTY_PRINTK)	+= ttyprintk.o
 obj-y				+= misc.o

通过make ARCH=arm menuconfig配置内核。
编译内核(尝试把hello编译为.ko和直接built-in 2种情况)。
并放到板子上

3. kernel module
  a. ~/training/kernel/drivers/hello
  b. ~/training/kernel/drivers/param
  进入~/develop/training/kernel/drivers/param目录
  modinfo book.ko

  之后insmod book.ko

  然后dmesg

  之后rmmod book

  再重新加载：
  sudo insmod book.ko book_num=9832985

  然后dmesg


  c. ~/training/kernel/drivers/export

4. proc
进入~/develop/training/kernel/proc/目录
sudo insmod proc.ko
观察/proc下面多出来了test_dir，下面也多出来test_rw文件

进行读写实验：
baohua@baohua-VirtualBox:/proc/test_dir$ cat test_rw 
0
baohua@baohua-VirtualBox:/proc/test_dir$ sudo sh -c 'echo 4 > test_rw'
[sudo] password for baohua: 
baohua@baohua-VirtualBox:/proc/test_dir$ cat test_rw 
4


5.use qemu-system-arm with "-s -S", and use arm gdb to debug embedded kernel
shell1:
~/develop/linux/extra/ run-nolcd.sh or run-lcd.sh
before running, add -s -S in the script.

shell2:
cd ~/develop/linux
arm-linux-gnueabihf-gdb vmlinux
# target remote :1234
b start_kernel

